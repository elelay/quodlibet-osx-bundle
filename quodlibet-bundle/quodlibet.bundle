<?xml version="1.0" standalone="no"?> <!--*- mode: xml -*-->
<app-bundle>

  <meta>
    <!-- Where to pick up the GTK+ installation, icon themes,
         etc. Note that "${env:JHBUILD_PREFIX}" is evaluated to the
         value of the environment variable JHBUILD_PREFIX. You can
         define additional prefixes and refer to them in paths
         throughout this file on the form "${prefix:name}". This is
         useful for installing certain libraries or even the
         application itself separately. Note that JHBUILD_PREFIX is
         defined by jhbuild, so it you are not using jhbuild you can
         either define your own or just hardcode the path here.
    -->
    <prefix name="default">${env:JHBUILD_PREFIX}</prefix>

    <!-- The project directory is the default location of the created
         app. If you leave out the path, the current directory is
         used. Note the usage of an environment variable here again.
    -->
    <destination overwrite="yes">${env:HOME}/Desktop</destination>

    <!-- Comment this out to keep the install names in binaries.  -->
    <run-install-name-tool/>

    <!--A launcher script is pretty much mandatory here so that we can
         set $PYTHON to point to the python in the bundle.
    -->
    <launcher-script>${project}/quodlibet.sh</launcher-script >

     <!-- Indicate the active gtk version to use. This is needed only
         for gtk+-3.0 projects. -->
    <gtk>gtk+-3.0</gtk>
 </meta>

  <!-- The special macro "${project}" refers to the directory where
       this bundle file is located. The application name and bundle
       identifier are taken from the plist file.
  -->
  <plist>${project}/Info-quodlibet.plist</plist>

 <!-- This is mandatory, and the result gets named to the appname from
      Info.plist with bin tacked on the end, in this example,
      PyGtkDemo-bin. Bunlder won't let us use the one from $project,
      so we use the original and ignore it. If your original will work
      in the bundle, you can use this instead.-->
 <main-binary>
     ${prefix}/bin/quodlibet
  </main-binary>

  <!-- We need to pack our own Python to avoid compatibility problems. -->
  <binary dest="${bundle}/Contents/MacOS">
    ${prefix}/bin/python
  </binary>

  <!-- Gtk+ is required by python modules which aren't searched for
       dependencies, so we have to pull it in explicitly. It will
       bring Pango and Cairo with it. Note the use of ${gtkversion},
       which expands to either 2.0 or 3.0, depending on which value of
       gtk is specified.-->
  <binary>
    ${prefix}/lib/libgtk-${gtkversion}.dylib
  </binary>
  <binary>
    ${prefix}/lib/libgtkmacintegration.dylib
  </binary>

  <!-- Copy in GTK+ theme engines. Note the use of the
       "${pkg:module:variable}" macro, which evaluates to a pkg-config
       variable in the specified module. Note that any libraries that
       binaries link to are also copied in automatically.  Note also
       the included ${gtk} macro, which gets the correct package name
       to get. -->
  <binary>
    ${prefix}/lib/${gtkdir}/${pkg:${gtk}:gtk_binary_version}/theming-engines/*.so
  </binary>

  <!-- Copy in the input methods. Dunno if they actually work with
       OSX. Note the ${gtkdir} macro, which expands to the correct
       library subdirectory for the specified gtk version. -->
  <binary>
    ${prefix}/lib/${gtkdir}/${pkg:${gtk}:gtk_binary_version}/immodules/*.so
  </binary>

  <!-- And the print backends -->
  <binary>
    ${prefix}/lib/${gtkdir}/${pkg:${gtk}:gtk_binary_version}/printbackends/*.so
  </binary>

<!-- Starting with 2.24, gdk-pixbuf installs into its own directory. -->
  <data>
    ${prefix}/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache
  </data>
  <binary>
    ${prefix}/lib/gdk-pixbuf-2.0/2.10.0/loaders/*.so
  </binary>
  <binary>
  ${prefix}/bin/gdk-pixbuf-query-loaders
  </binary>

  <!-- pango 2.36 has its own separate modules -->
  <binary>
    ${prefix}/lib/pango/1.8.0/modules/*.so
  </binary>

  <!-- gstreamer plugins -->
  <binary>
  	${prefix}/lib/gstreamer-1.0/*.so
  </binary>
  <!-- references
    http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/gst-running.html
    http://gstreamer-devel.966125.n4.nabble.com/gst-inspect-not-finding-plugin-loader-helper-binary-td3761397.html
   -->
  <binary>
  	${prefix}/libexec/gstreamer-1.0/gst-plugin-scanner
  </binary>
  
  
  <!-- Translation filenames, one for each program or library that you
       want to copy in to the bundle. The "dest" attribute is
       optional, as usual. Bundler will find all translations of that
       library/program under the indicated directory and copy them.-->
  <translations name="atk10">
    ${prefix}/share/locale
  </translations>
  <translations name="gdk-pixbuf">
    ${prefix}/share/locale
  </translations>
  <translations name="glib20">
    ${prefix}/share/locale
  </translations>
  <translations name="gst-plugins-base-1.0">
    ${prefix}/share/locale
  </translations>
  <translations name="gst-plugins-good-1.0">
    ${prefix}/share/locale
  </translations>
  <translations name="gst-plugins-ugly-1.0">
    ${prefix}/share/locale
  </translations>
  <translations name="gstreamer-1.0">
    ${prefix}/share/locale
  </translations>
  <translations name="gtk30-properties">
    ${prefix}/share/locale
  </translations>
  <translations name="gtk30">
    ${prefix}/share/locale
  </translations>
  <translations name="quodlibet">
    ${prefix}/share/locale
  </translations>
  <translations name="shared-mime-info">
    ${prefix}/share/locale
  </translations>


  <!-- Be careful, only to pick required python modules  -->
  
  <!-- standard install minus unused -->
  <data>
  ${prefix}/lib/python2.7/*.py
  </data>
  <data>${prefix}/lib/python2.7/bsddb</data>
  <data>${prefix}/lib/python2.7/compiler</data>
  <data>${prefix}/lib/python2.7/config</data>
  <data>${prefix}/lib/python2.7/ctypes</data>
  <data>${prefix}/lib/python2.7/curses</data>
  <data>${prefix}/lib/python2.7/email</data>
  <data>${prefix}/lib/python2.7/encodings</data>
  <data>${prefix}/lib/python2.7/hotshot</data>
  <data>${prefix}/lib/python2.7/importlib</data>
  <data>${prefix}/lib/python2.7/json</data>
  <data>${prefix}/lib/python2.7/lib-dynload</data>
  <data>${prefix}/lib/python2.7/logging</data>
  <data>${prefix}/lib/python2.7/multiprocessing</data>
  <data>${prefix}/lib/python2.7/plat-darwin</data>
  <data>${prefix}/lib/python2.7/plat-mac</data>
  <data>${prefix}/lib/python2.7/sqlite3</data>
  <data>${prefix}/lib/python2.7/wsgiref</data>
  <data>${prefix}/lib/python2.7/xml</data>
  <!-- only required extra modules (no dbus, for instance) -->
  <data>${prefix}/lib/python2.7/site-packages/feedparser.py</data>
  <data>${prefix}/lib/python2.7/site-packages/cairo</data>
  <data>${prefix}/lib/python2.7/site-packages/gi</data>
  <data>${prefix}/lib/python2.7/site-packages/musicbrainz2</data>
  <data>${prefix}/lib/python2.7/site-packages/mutagen</data>
  <data>${prefix}/lib/python2.7/site-packages/quodlibet</data>
	

  <binary>
    ${prefix}/lib/python2.7/lib-dynload/*.so
  </binary>
  
  <!-- every bundled .so must have its dynamic links rewritten to point to the bundle.
       Can't specify site-packages/*/*.so, so list them based on the output of postproc.sh.
    -->
  <binary>
    ${prefix}/lib/python2.7/site-packages/cairo/*.so
  </binary>
  <binary>
    ${prefix}/lib/python2.7/site-packages/gi/*.so
  </binary>
  <!--<binary>
    ${prefix}/lib/python2.7/site-packages/gtkosx_application/*.so
  </binary>-->

  <data>
    ${prefix}/share/gir-1.0
  </data>
  <data>
    ${prefix}/lib/girepository-1.0
  </data>
  <binary>
    ${prefix}/lib/libgst*.dylib
  </binary>
  
  <data>
    ${prefix}/include/python2.7
  </data>

  <data>
    ${prefix}/bin/quodlibet
  </data>
  <data>
    ${prefix}/bin/exfalso
  </data>

  <data>
    ${prefix}/share/glib-2.0/schemas
  </data>


  <data>
    ${prefix}/share/icons/hicolor/scalable/apps
  </data>

  <data dest="${bundle}/Contents/Resources/quodlibet.icns">
    ${project}/icon.icns
  </data>
   
  <!-- Copy in the themes data. You may want to trim this to save space
       in your bundle. -->
  <data>
    ${prefix}/share/themes/Adwaita
  </data>

  <!-- This is where theme commands go. You can copy them in from your
       theme of choice if they provide and example, or you can just
       change the source path. -->

  <data dest="${bundle}/Contents/Resources/etc/${gtkdir}/settings.ini">
    ${project}/settings.ini
  </data>

  <!-- Icon themes to copy. The "icons" property can be either of
       "auto", "all", or "none". All or none should be
       self-explanatory, while auto means that the script will try to
       figure out which icons are needed. This is done by getting all
       the strings from all copied binaries, and matching them against
       icon names. To be safe, you should use "all". "none" is useful
       if you want just the index.theme file but no icons, mostly
       needed for the "hicolor" base theme.
  -->
  <!-- must say all to get icons at bottom left of paned browser -->
  <icon-theme icons="all">
    Adwaita
  </icon-theme>

  <!-- gPodder icon in the about dialog (gpodder.icon_file initialised in gpodder script) -->
  <data dest="${bundle}/Contents/Resources/share/icons/hicolor/scalable/apps">
  	${prefix}/share/icons/hicolor/scalable/apps/quodlibet.svg
  </data>
  <data dest="${bundle}/Contents/Resources/share/icons/hicolor/scalable/apps">
  	${prefix}/share/icons/hicolor/scalable/apps/exfalso.svg
  </data>

  <!-- get file-dependent icons (e.g. music note if it's an audio file) -->
  <data dest="${bundle}/Contents/Resources/share/mime">
  	${prefix}/share/mime
  </data>

</app-bundle>
